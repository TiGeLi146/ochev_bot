from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.db_api.sqlite import *

count_page = 10


################################################################################################
################################# –°–¢–†–ê–ù–ò–¶–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô #################################
# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
def category_open_edit_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"edit_category_here:{get_categories[a][1]}:{remover}"))
        x += 1
    if len(get_categories) <= 10:
        pass
    elif len(get_categories) > count_page and remover < 10:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"edit_catategory_nextp:{remover + count_page}")
        keyboard.add(nomer_kb, next_kb)
    elif remover + count_page >= len(get_categories):
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"edit_catategory_prevp:{remover - count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        keyboard.add(prev_kb, nomer_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"edit_catategory_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"edit_catategory_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    return keyboard


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
def category_edit_next_page_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"edit_category_here:{get_categories[a][1]}:{remover}"))
        x += 1
    if remover + count_page >= len(get_categories):
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"edit_catategory_prevp:{remover - count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        keyboard.add(prev_kb, nomer_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"edit_catategory_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"edit_catategory_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)

    return keyboard


# –ü—Ä–µ–¥—ã–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
def category_edit_prev_page_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"edit_category_here:{get_categories[a][1]}:{remover}"))
        x += 1
    if remover <= 0:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"edit_catategory_nextp:{remover + count_page}")
        keyboard.add(nomer_kb, next_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"edit_catategory_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"edit_catategory_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    return keyboard


################################################################################################
################################### –°–¢–†–ê–ù–ò–¶–´ –°–û–ó–î–ê–ù–ò–Ø –§–û–†–ú–£–õ ##################################
# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã
def position_open_create_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"create_position_here:{get_categories[a][1]}"))
        x += 1
    if len(get_categories) <= 10:
        pass
    elif len(get_categories) > count_page:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"create_position_nextp:{remover + count_page}")
        keyboard.add(nomer_kb, next_kb)
    return keyboard


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã
def position_create_next_page_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"create_position_here:{get_categories[a][1]}"))
        x += 1
    if remover + count_page >= len(get_categories):
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"create_position_prevp:{remover - count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        keyboard.add(prev_kb, nomer_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"create_position_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"create_position_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    return keyboard


# –ü—Ä–µ–¥—ã–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã
def position_create_previous_page_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"create_position_here:{get_categories[a][1]}"))
        x += 1
    if remover <= 0:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"create_position_nextp:{remover + count_page}")
        keyboard.add(nomer_kb, next_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°", callback_data=f"create_position_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"create_position_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    return keyboard


################################################################################################
################################## –°–¢–†–ê–ù–ò–¶–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –§–û–†–ú–£–õ ##################################
########################################### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ##########################################
# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—É–ª—ã
def position_open_edit_category_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"position_edit_category:{get_categories[a][1]}"))
        x += 1
    if len(get_categories) <= 10:
        pass
    elif len(get_categories) > count_page and remover < 10:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_category_nextp:{remover + count_page}")
        keyboard.add(nomer_kb, next_kb)
    elif remover + count_page >= len(get_categories):
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_category_prevp:{remover - count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        keyboard.add(prev_kb, nomer_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_category_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_category_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    return keyboard


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—É–ª—ã
def position_edit_next_page_category_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"position_edit_category:{get_categories[a][1]}"))
        x += 1
    if remover + count_page >= len(get_categories):
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_category_prevp:{remover - count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        keyboard.add(prev_kb, nomer_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_category_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_category_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    return keyboard


# –ü—Ä–µ–¥—ã–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—É–ª—ã
def position_edit_previous_page_category_ap(remover):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_categories = get_all_categoriesx()
    for a in range(remover, len(get_categories)):
        if x < count_page:
            keyboard.add(InlineKeyboardButton(f"{get_categories[a][2]}",
                                              callback_data=f"position_edit_category:{get_categories[a][1]}"))
        x += 1
    if remover <= 0:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_category_nextp:{remover + count_page}")
        keyboard.add(nomer_kb, next_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_category_nextp:{remover + count_page}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_category_prevp:{remover - count_page}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    return keyboard


########################################### –§–æ—Ä–º—É–ª—ã ##########################################
# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–æ—Ä–º—É–ª –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
def position_open_edit_ap(remover, category_id):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_positions = get_positionsx("*", category_id=category_id)
    # for a in range(remover, len(get_positions)):
    #     if x < count_page:
    #         get_items = get_itemsx("*", position_id=get_positions[a][1])
    #         keyboard.add(InlineKeyboardButton(f"{get_positions[a][2]} | {get_positions[a][3]}—Ä—É–± | {len(get_items)}—à—Ç",
    #                                           callback_data=f"position_edit:{get_positions[a][1]}:{remover}:{category_id}"))
    #     x += 1
    if len(get_positions) <= 10:
        pass
    elif len(get_positions) > count_page and remover < 10:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_nextp:{remover + count_page}:{category_id}")
        keyboard.add(nomer_kb, next_kb)
    elif remover + count_page >= len(get_positions):
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_prevp:{remover - count_page}:{category_id}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        keyboard.add(prev_kb, nomer_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_nextp:{remover + count_page}:{category_id}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_prevp:{remover - count_page}:{category_id}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    keyboard.add(InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©",
                                      callback_data=f"back_to_category"))
    return keyboard


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—É–ª –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
def position_edit_next_page_ap(remover, category_id):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_positions = get_positionsx("*", category_id=category_id)
    for a in range(remover, len(get_positions)):
        # if x < count_page:
        #     get_items = get_itemsx("*", position_id=get_positions[a][1])
        #     keyboard.add(InlineKeyboardButton(f"{get_positions[a][2]} | {get_positions[a][3]}—Ä—É–± | {len(get_items)}—à—Ç",
        #                                       callback_data=f"position_edit:{get_positions[a][1]}:{remover}:{category_id}"))
        x += 1
    if remover + count_page >= len(get_positions):
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_prevp:{remover - count_page}:{category_id}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        keyboard.add(prev_kb, nomer_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_nextp:{remover + count_page}:{category_id}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_prevp:{remover - count_page}:{category_id}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    keyboard.add(InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©",
                                      callback_data=f"back_to_category"))
    return keyboard


# –ü—Ä–µ–¥—ã–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—É–ª –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
def position_edit_previous_page_ap(remover, category_id):
    x = 0
    keyboard = InlineKeyboardMarkup()
    get_positions = get_positionsx("*", category_id=category_id)
    # for a in range(remover, len(get_positions)):
    #     if x < count_page:
    #         get_items = get_itemsx("*", position_id=get_positions[a][1])
    #         keyboard.add(InlineKeyboardButton(f"{get_positions[a][2]} | {get_positions[a][3]}—Ä—É–± | {len(get_items)}—à—Ç",
    #                                           callback_data=f"position_edit:{get_positions[a][1]}:{remover}:{category_id}"))
    #     x += 1
    if remover <= 0:
        nomer_kb = InlineKeyboardButton("üî∏ 1 üî∏", callback_data="...")
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_nextp:{remover + count_page}:{category_id}")
        keyboard.add(nomer_kb, next_kb)
    else:
        next_kb = InlineKeyboardButton("‚û° –î–∞–ª–µ–µ ‚û°",
                                       callback_data=f"edit_position_nextp:{remover + count_page}:{category_id}")
        nomer_kb = InlineKeyboardButton(f"üî∏ {str(remover + count_page)[:-1]} üî∏", callback_data="...")
        prev_kb = InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ ‚¨Ö",
                                       callback_data=f"edit_position_prevp:{remover - count_page}:{category_id}")
        keyboard.add(prev_kb, nomer_kb, next_kb)
    keyboard.add(InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©",
                                      callback_data=f"back_to_category"))
    return keyboard
